SQL을 직접 작성하지 않는다. ->JPA

@Entity
엔티티 클래스를 가지고 테이블을 만들어준다.

JPA에서 제공하는 인터페이스를 가지고 쿼리문을 대신한다.

findAll() -> select * from 테이블명 
save() -> insert, update
delete() -> delete from 테이블명 where id=xx;


스프링부트 프로젝트 만들고 import 하기
start.spring.io
- java, gradle
- Group : com.korea
- Artifact : product

필요 의존성
- Spring Web
- H2
- lombok
- Spring Data JPA

ProductEntity클래스 만들기
- 테이블명 product
속성
- 상품id (primary key)
- 상품이름
- 상품재고
- 상품가격
- 등록날짜
- 수정날짜

ProductDTO클래스 만들기
속성
- 상품번호
- 상품이름
- 상품재고
- 상품가격
- 등록날짜
- 수정날짜
기능
Entity -> DTO 변환기능
DTO -> Entity 변환기능

ResponseDTO
- 클라이언트와 데이터를 직접적으로 주고받기 위한 DTO클래스
- 제네릭 타입을 가지고 있다.
속성
- String error
- 리스트 data

ProductRepository 인터페이스 만들기
- JpaRepository상속받기

서비스 계층 만들기
ProductService클래스 생성하기
- ProductRepository를 주입하기

표현계층 만들기
ProductController클래스 생성하기
- ProductService를 주입하기


조회하기 기능 만들기
- 데이터 베이스에 들어있는 모든 상품을 조회하는 API만들기
- 결과는 ResponseDTO에 담아서 보내기
- ProductService : findAll()
- ProductController
- HTTPMETHOD : GET
- 메서드명 : ResponseEntity<?> productList()


추가하기
- 클라이언트로부터 데이터를 넘겨 받아서 DB에 데이터 추가하기
ProductService
-메서드명 create()

ProductController
- HTTPMETHOD : POST
- 메서드명 : createProduct()

----------------------------------------------------------------------------------
상품정보를 볼 수 있는 화면 만들기
- product-react-app 이름으로 리액트 프로젝트 만들기
- src에 p_infi.js 만들기
- axios로 백엔드에 데이터를 요청하고 받아와서 화면에 출력하기
- ApiService파일의 call메서드를 사용해도 좋습니다.

-src에 AddProduct.js만들기
-상품추가 버튼을 누르면 추가 창이 뜨는 컴포넌트 만들기