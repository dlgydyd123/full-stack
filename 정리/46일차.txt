백엔드
1.전체조회
2.상품추가

프론트엔드
1.(백엔드와 통신하여 데이터를 받아서) 전체조회를 할 수 있는 화면
2.(입력필드에 데이터를 입력해서 백엔드로 요청할 수 있는)상품 추가 화면

npm start -> index.js실행

jsx문법
1.변수에 html태그를 저장할 수 있다.
2.값은 {value}를 통해서 사용할 수 있다.

다른 컴포넌트로 값이나 함수를 전달할 때
<컴포넌트명 key= {value} />

function 컴포넌트명(props){
	변수명 = props.key -> 넘겨받은 값이나 함수를 사용할 수 있다.
return(
	{변수명}	 
        )
} 

---------------------------------------------------------------------------
주문하기
OrderEntity
-com.korea.product.model에 OrderEntity클래스 만들기

속성
-주문번호(Primary key)
-상품번호
-주문 개수
-주문 날짜


OrderDTO
-주문내역을 조회할 때 총 결제금액 까지 보여줄것이다.

속성
-주문번호
-상품번호
-상품이름
-주문개수
-상품가격
-결제금액
-주문 날짜 

OrderRepository
-JpaRepository


OrderService 클래스
-Order Repository를 주입

OrderController클래스
-OrderService를 주입
-mapping : orders

주문내역 조회하기
-List<Object[]>  findAllOrderTotalPrices()

OrderService
-메서드명 getAllOrderTotals()


OrderController
- HTTP 메소드 : GET
- 리소스 : total
- 메서드명 : getAllOrderTotals()


주문하기
- 클라이언트로부터 productId와 productCount를 전달받아 주문테이블에 주문내역 추가하기

OrderService에 주문하기 로직

1.상품이 존재하는지 확인
2.재고를 확인 
3.주문하기(DB에 주문내역 저장하기)
4.재고감소
5.전체목록 반환하기
