DB
데이터들의 묶음, 컴퓨터에 넣어 전자적으로 관리

DBMS
데이터베이스와 사용자 또는 프로그램간의 매개체
DB의 조회, 수정, 삭제, 추가와 같은 관리를 할 수 있게 해준다.


RDBMS(관계형 데이터베이스)
행과 열의 형태로 데이터를 저장하는 데이터베이스 관리시스템

Oracle
mySQL
MSSQL
MariaDB
...

DBMS  사용하면 좋은 점
엑셀사용시 데이터가 많아지면 버벅거린다.(몇백개만 넣어도)
파일로 관리할 시 공용폴더 혹은 공유하지 않으면 변경사항에 대해 알 수 없다.
한명이 사용시 나머지는 사용 불가능
각자 작업한 거를 합치기 쉽지 않음 

DBMS 사용시 많은 양의 데이터를 넣어도 끄떡없음
하나의 DB에 여러사람이 접속해서 사용할 수 있다.
수정한 내용이 즉각적으로 반영되어 모든사용자에게 동일한 내용이 보여진다.


9i -> internet -> 인터넷에 접속을 해서 사용할 수 있다. 
11g -> grid -> 데이터를 표 형태로 저장하는게 특징이다.
12c -> cloud -> 클라우드로 관리하겠다.

프롬프트로 오라클에 접속하는 법 
sqlplus

계정명/비밀번호(안보임)

계정 잠금 풀기
ALTER user 계정명 account unlock;

계정 비밀번호 바꾸기
ALTER user 계정명 identified by 새비밀번호;

오라클과 자바프로그램을 연결하기 위해서 필요한 라이브러리
ojdbc

스키마
외부에서 DB를 바라보는 관점 메타데이터

개념스키마 : DB의 관계, 제약조건, 접근권한, 보안정책 정의한 것
내부스키마 : 물리적(기억장치)으로 저장할거냐
외부스키마 : 사용자나 개발자가 어떻게 사용할거냐

DDL : 데이터 정의어

CREATE : 데이터베이스 객체 생성

ALTER : 데이터베이스 객체 수정

DROP : 데이터베이스 객체 영구 삭제

TRUNCATE : 테이블 내의 데이터만 몽땅 삭제

행(row) 1명에 대한 정보
튜플(tuple)
행의 개수를 카디널리티라고 한다.

열(column) 1가지에 대한 정보
속성(attribute)
열의 개수를 디그리(degree)라고 한다.

자료형
문자형
VARCHAR2(길이) : 가변형 최대 4000byte

숫자형
NUMBER(P,S) : P는 자리수, S는 소수점 이하 자리수

날짜형
DATE

제약조건

NOT NULL : 비워두지 마라

UNIQUE : 중복되는 값 넣지마라

PRIMARY KEY : 중복값 넣지말고 비워두지도 마라 (테이블당 1개)

FOREIGN KEY : 다른 테이블의 PK를 참조하는 키

CHECK : 조건에 해당하는 데이터만 입력할 수 있음

DEFAULT :  데이터를 넣을 때 비워두면 기본값으로 넣겠다.

CREATE TABLE 테이블명(
	컬럼명 타입(길이) 제약조건,
	컬럼명 타입(길이) 제약조건,
	컬럼명 타입(길이) 제약조건,
	CONSTRAINT 
);


DROP TABLE 테이블명;


NOT NULL과 DEFAULT의 차이점

EX) GENDER CHAR(1) DEFAULT 'W'
/*QUERY1*/
INSERT INTO TBL_STUDENT GENDER VALUES(NULL);

/*QUERY2*/
INSERT INTO TBL_STUDENT GENDER VALUES();

쿼리1은 'NULL' 이라는 특정한 값을 받았다고 생각하기 때문에 
DEFAULT값이 안들어간다.
쿼리2는 아무런 입력도 받지 않았다고 생각하기 때문에 DEFAULT값인 'W'가 설정된다.

1.NOT NULL만 선언한 경우
쿼리1의 경우 : NOT NULL이 동작을 한다.
쿼리2의 경우 : NOT NULL이 동작을 한다.

2.두개 다 선언한 경우
쿼리1의 경우 : DEFAULT가 동작하여 기본값이 들어감
쿼리2의 경우 : NOT NULL이 동작하여 오류남

무결성 
- 데이터 베이스에 저장된 값과 현실 세계의 실제 값이 일치하는지 정확성을 의미
- 무결성 제약조건은 DB에 들어있는 데이터의 정확성을 보장하기 위해 부정확한 자료가
  DB내에 저장되는 것을 방지하기 위한 제약조건을 말한다.
- 데이터의 정확성, 일관성, 유효성이 유지되는 것
- 일관된 데이터베이스 상태를 정의하는 규칙을 묵시적 또는 명시적으로 정의함
- 정확성 : 중복이나 누락이 없는 상태
- 일관성 : 원인과 결과의 의미가 연속적으로 보장되어 변하지 않는 상태
- 유효성 : 사용자로부터 값을 입력받을 때 정확한 값만 입력되도록 할 때 유효한 기능

1. 개체 무결성
- PK(PRIMARY KEY)로 선택된 컬럼은 고유한 값을 가져야 하며, NULL값을 허용하지 않는다.

2. 참조 무결성
- 외래키 값은 NULL이거나 참조 테이블의 기본키 값과 동일해야 한다.
- 즉, 테이블을 참조할 수 없는 외래키 값을 가질 수 없다.

3. 도메인 무결성
도메인이란 하나의 속성이 가질 수 있는 데이터의 집합
- 주어진 속성의 값들이 도메인에 속한 값이어야 한다는 규정
- 수강이라는 테이블에 '과목명'에 영어, 수학, 국어 세가지만 입력되도록 도메인을 가진 경우
- 반드시 도메인에 속한 값만 입력해야 한다.

4. 사용자 정의 무결성
- 속성 값들이 사용자가 정의한 제약 조건에 만족해야 한다는 규정

모델링
- 정보시스템 구축의 대상이 되는 업무 내용을 분석하여 이해하고 약속된 표기법에 
의해 표현하는 것을 의미한다.
- 분석된 모델을 가지고 실제 데이터베이스를 생성하여 개발 및 데이터관리에 사용한다.
-특히 데이터를 추상화 한 데이터 모델은 데이터 베이스의 골격을 이해하고 그 이해를 
바탕으로 SQL문장을 기능과 성능적인 측면에서 효율적으로 작성할 수 있기 때문에 
데이터 모델링은 데이터베이스 설계의 핵심과정이기도 하다.

데이터 모델링의 특징
- 추상화 : 현실세계를 일정한 형식에 맞춰 간략하게 표현해야 한다.
- 단순화 : 누구나 쉽게 이해할 수 있도록 제한된 표기법이나 언어를 사용한다.
- 명확화 : 명확하게 의미가 해석되어야 하고, 한 가지 의미만을 가져야 한다.

1. 요구사항 분석
- 고객과의 의사소통을 통해 고객의 업무 프로세스를 완벽하게 이해하고 그들의 요구사항을 
구체적으로 뽑아내는 과정

2. 개념적 데이터 모델링
- 내가 하고자 하는 일의 데이터간 관계를 구상하는 단계
- 각 객체들과 그들간의 관계를 발견하고 표현하기 위해 ERD(Entity - Relationship Diagram)를 생성한다.

3. 논리적 데이터 모델링
- 개념적 데이터 모델이 완성되면, 구체화된 업무 중심의 데이터 모델을 만들어내야 한다.
- 업무에 대한 제약조건, 속성, 관계등을 표시하며 정규화 활동을 수행한다.
- 정규화는 데이터 모델의 일관성을 확보하고 중복을 제거하여 신뢰성있는 
 데이터 구조를 얻는 목적이 있다.


회원		주문		상품		결제정보

ID(PK)----		주문번호	       ----상품번호(PK)     ----계좌번호(PK)
PW	|	주문일	       |	상품명	        |	은행명(PK)
이름	------->	ID(FK)	       |	가격	        |	예금주
주소		상품번호(FK)<--	재고               |
이메일		계좌번호(FK)<-----------------------		
생일


조합키
- 두 개 이상의 컬럼이 하나의 기본키로 작동하기 때문에 두 개가 완전히 일치하는 데이터가 올 수 없다.
- 조합키 만드는 법
CREATE TABLE TEST(
	Col1 VALCHAR2(30),
	Col2 NUMBER,
	CONSTRAINT TEST_PK PRIMARY KEY(Col1, Col2)
);


4. 물리적 데이터 모델링
 - 최종적으로 데이터를 관리할 데이터베이스를 선택하고, 선택한 데이터베이스에 
 실제 테이블을 만드는 작업을 말한다.
- 시각적인 구조를 만들었으면 실제로 SQL코딩을 통해 완성하는 단계


USER
U_ID(PK)		VARCHAR2(100)
U_PW		VARCHAR2(100)
U_NAME		VARCHAR2(200)
U_ADDRESS	VARCHAR2(300)
U_EMAIL		VARCHAR2(300)
U_BIRTH		DATE

----------------------------------------

ORDER
O_NUM		NUMBER
O_DATE		DATE
U_ID(FK)		VARCHAR2(100)
P_NUM(FK)	NUMBER
		
----------------------------------------

PRODUCK
P_NUM(PK)	NUMBER
P_NAME		VARCHAR2(200)
P_PRICE		NUMBER
P_COUNT		NUMBER
	


관계
1:1관계
어느 한쪽의 테이블에서 상대 테이블과 반드시 단 하나의 관계를 가지는 것
한 사람이 하나의 여권만 만들 수 있다.
EX)
국민			여권정보

주민등록번호(PK)		여권번호
이름			주민등록번호


1:N관계 (1대 다 관계)
한 쪽 테이블이 관계를 맺은 쪽의 테이블에 여러 객체를 가질 수 있는 것
한명의 유저가 어려개의 물건을 주문 할 수 있다.

N:M관계(다대 다 관계)
관계를 맺고 있는 양쪽의 테이블 모두가 1:N 관계를 가지는 것

한 학원에는 여러명의 학생이 다닐 수 있고
한명의 학생도 여러개의 학원을 다닐 수 있다.

N:M 관계는 두 테이블의 기본키를 컬럼으로 갖는 또 다른 테이블을 생성해서 관리한다.


1.요구사항
꽃 테이블과 화분 테이블이 필요하다
꽃을 구매할 때 화분도 같이 구매한다.
-꽃 테이블
   - 꽃 이름
   - 꽃 색깔
   - 꽃 가격
-화분
   - 제품번호
   - 화분색깔
   - 화분모양
   - 꽃 이름


FLOWER				POT
F_NAME(PK) VARCHAR2(100)	 	P_NUM(PK)  NUMBER
F_COLOR	    VARCHAR2(100)	P_COLOR    VARCHAR2(100)	 
F_PRICE	    NUMBER		P_SHAPE     VARCHAR2(100)	 
				F_NAME(FK) VARCHAR2(100)	 


4,2

CD				ARTIST				TRACK
C_TITLE(PK)    VARCHAR2(100)	A_NAME(PK)    VARCHAR2(100)	T_TITLE           VARCHAR2(100)	
C_PRICE	      NUMBER		A_NATIONLITY VARCHAR2(100)	RUNNINGTIME  NUMBER
C_GENRE	      VARCHAR2(100)	A_DEBUT_YEAR DATE		C_TITLE(FK)       VARCHAR2(100)	
C_TRACK_LIST VARCHAR2(100)
A_NAME(FK)   VARCHAR2(100)


-------------------------------------------------------------------------------------------------------------------------------
부서		직원		부양가족		근무기록
부서번호		직원번호		이름		기간
부서이름		직원이름		나이		직책
		직책


DEPARTMENT		EMPLOYEE		FAMILY	    			WORKRECORD
D_NUM	NUMBER	(PK)	E_NUM	NUMBER	(PK)	F_NAME	VARCHAR2(100)		R_DAY NUMBER
D_NAME VARCHAR2(100)	E_NAME	VARCHAR2(100)	F_AGE 	NUMBER			E_NUM NUMBER(FK)
			E_POSITION VARCHAR2(100) E_NUM	NUMBER(FK)		
			D_NUM	NUMBER	(FK)


-------------------------------------------------------------------------------------------------------------------------------


DML(Data Manipulation Language) : 데이터 조작어

1. SELECT : 데이터의 조회
- 테이블에서 원하는 데이터를 조회할 때 사용하는 키워드

SELECT 컬럼명1, 컬럼명2, 컬럼명3,... FROM 테이블명;

SELECT 컬럼명1, 컬럼명2, 컬럼명3,... FROM 테이블명
WHERE 조건식;

조건절 
원하는 자료를 검색하기 위한 조건절 
WHERE 절에서는 결과를 제한하기 위한 조건을 기술할 수도 있다.
WHERE 절은 조회하려는 데이터에 특정 조건을 부여할 목적으로 사용하기 때문에
FROM절 뒤에 오게 된다.

WHERE 절의 조건식은 다음과 같이 구성된다.
- 컬럼명이 왼쪽에 온다.
- 비교연산자가 가운데 온다.
   - >, < 
   - >=, <=
   - = (같다)
   - !=, <>, ^= (같지않다.)
   - AND : 그리고 
   - OR : 또는 
-문자, 숫자, 표현식(조건식의 우측에 위치)

조건식에서 NULL 사용하기
컬럼명 IS NULL
컬럼명 IS NOT NULL

SQL연산자
1. BETWEEN : A와 B사이의 값을 조회할 때 사용
BETWEEN 값 AND 값

2. IN : OR을 대신해 사용하는 연산자
IN(값,값,값)

3. LIKE : 유사검색
LIKE 유사검색
WHERE절에서 사용되며 부분적으로 일치하는 속성을 찾을 때 사용된다.
% : 모든값
_ : 하나의 값
EX) : 'A%' : A으로 시작하는 모든 데이터
       '%A' : A로 끝나는 모든 데이터
       '%A%' : A를 포함하는 모든 데이터
       'A_' : A로 시작하는 두글자 짜리 데이터
       '_A_' : A를 두번째 글자로 갖는 세글자 짜리 데이터
       'A__' : A로 끝나는 세글자짜리 데이터




2. INSERT : 데이터의 추가
3. UPDATE : 데이터의 수정
4. DELETE : 데이터의 삭제 

