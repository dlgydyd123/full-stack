프론트엔드 + 백엔드


특정 유저가 작성한 Todo를 조회(임시 계정을 쓰기 때문에 지금은 의미 X)

		요청(request)	react	   응답(response)   Springboot
클라이언트	      -><-    	프론트엔드	 -><-	백엔드
				fetch()/todo		TodoController
				axios()			     ↓↑
							TodoService
							     ↓↑
							repository
							     ↓↑
							DataBase


추가(내가 입력한 데이터를 백엔드까지 보내야 함)

스프링부트
Controller에서 사용되는 어노테이션

@Component : 스프링부트가 컴포넌트 스캐닝을 할 때 해당 어노테이션이 달린 클래스들을 전부 bean으로 만든다.

@Component 어노테이션의 자식어노테이션
ㄴ @Controller : 컨트롤러임을 나타내는 어노테이션
ㄴ @Service : 서비스임을 나타내는 어노테이션
ㄴ @Repository : 리포지토리임을 나타내는 어노테이션


@RestController -> @Controller +@ResponseBody
ㄴ 해당 컨트롤러의 모든 메서드에 @ResponseBody가 적용된다.

원랴 컨트롤러는 반환으로 화면이름을 보낸다.
우리는 화면을 이미 리액트로 보여주고 있다.
@ResponseBody를 통해 응답 바디에 데이터를 보낸다.

@GetMapping
@PostMapping
@PutMapping
@DeleteMapping

각각의 요청메서드로 요청이 올 때 메서드를 실행을 해준다.

@PathVariable : 요청을 할 때 주소에 들어있는 값을 매개변수로 받을 때 사용

localhost:9090/product/1
@GetMapping("/{id}")
public String f(@PathVariable int id)


@RequestParam : 요청을 할 때 주소에 들어있는 값을 매개변수로 받을 때 사용

localhost:9090/product?id=1  -> ?id=1(쿼리파라미터)
public String f(@RequestParam("id") int id)

lombok
@Getter,@Setter
클래스에 들어있는 필드에 대해 getter,setter메서드를 만들어주는 어노테이션
@NoArgsConstructor
기본생성자를 생성해주는 어노테이션
@AllArgsConstructor
모든 필드를 매개변수로 갖는 생성자를 만드는 어노테이션
@RequiredArgsConstructor
final 또는 @NotNull 어노테이션이 붙은 필드만 매개변수로 갖는 생성자 생성
@Data
ㄴ@Getter
ㄴ@Setter
ㄴ@ToString : 오버라이딩한 toString()메서드를 작성
@Builder : builder패턴으로 객체를 생성할 수 있게 해주는 어노테이션


JPA에서 사용하는 어노테이션
@Entity : 해당 클래스가 JPA의 엔티티임을 명시
@Id : 해당 필드가 테이블의 기본키(Primary key)임을 명시
@GeneratedValue : 기본값을 자동으로 생성하도록 설정
@Table : 엔티티와 매핑될 테이블 이름을 지정. 테이블 이름이 엔티티와 다를 때 사용
 

JWT(JasonWebToken)

id와 비밀번호를 가지고 로그인 할 때 -> 토큰생성 및 발급
인증이 필요한 API를 호출할 때 토큰을 같이 보내서 인증을 받는다.
인증이 필요한 API가 1000개면?? -> 인증을 1000받아야 한다.
스프링부트 시큐리티를 사용해서 인증이 필요할 때마다 알아서 처리가 되게 하자.

user1이 회원가입 -> user1이 로그인 하면서 토큰을 발급받는다.
user1이 Todo를 추가({"title":"제목1"})하면서 토큰을 같이 전송을 한다.
-> 토큰을 검증을 받고 유효하면 추가를 해준다.

user2이 회원가입 -> user2이 로그인 하면서 토큰을 발급받는다.
user2이 Todo를 추가({"title":"제목2"})하면서 토큰을 같이 전송을 한다.
-> 토큰을 검증을 받고 유효하면 추가를 해준다.

비밀키를 가지고 암호화
{헤더}.{페이로드}.서명 -> Base64인코딩


filter -> 요청이 들어왔을 때 가로채서 검증을 한다. -> Controller로 보낸다.

filter(토큰이 유효한지 검증, 인증된 사용자의 정보를 저장)

Spring security -> 필터체인기반이다.

우리가 만든 필터를 Spring security가 사용하도록 설정

필터체인.doFilter()를 반드시 호출해야 함

회원가입 -> 로그인 시 토큰 발급

인증이 필요한 API 사용시 토큰과 함께 요청을 한다.