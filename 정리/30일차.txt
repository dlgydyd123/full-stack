let obj = {키:값,키:값,키:값}

생성자 함수르 통한 객체 생성하기
function Person(name,age){
	let nation ='korea'; -> private
	this.name =name;
	this.age =age;
	this.sayHello = function(){
		console.log('hi');
	}
	
}

let person1 = new Person('Lee',30);

객체의 프로퍼티에서 value 꺼내기
person1.name
person[name]
person10.syHello(); -> 메서드의 호출


함수
function 함수명(매개변수){
	처리하고 싶은 로직
	return 반환값;
}

함수명(인자);

지킬 프레임워크를 통해 템플릿 사용하기
_config.yml 메타데이터


about 섹션 수정하기

contact us 수정하기
사용자가 웹 사이트의 운영자에게 이메일로 문의를 보낼 수 있도록 꾸며진 도구이다. 


메일발송 서비스를 담당하는 Formspree라는 업체에서 스팸메일을 막기 위해 최근에 
규정을 변경해서 안보내진다.

Fromspree는 웹사이트에서 폼 제출을 처리하는 과정을 간소화하는 서비스이다.
사용자가 제출한 데이터를 해당 URL로 보낼 수 있다. 데이터를 처리하여 이메일로 
전달하거나 검토할 수 있도록 해준다.

<body>
   <form action="https://formspree.io/f/{form_id}" method="post">
     <label for="email">Your Email</label>
     <input name="Email" id="email" type="email">
     <button type="submit">Submit</button>
     <button type="reset">Reset</button>
   </form>
</boby>

form 태그
다른서버와 통신하기 위해 사용하는 태그
목적지는 action속성에 기재하고 통신방식은 method속성에 기재한다.

input태그에 쓰여진 value가 서버로 넘어간다.

https://formspree.io/f/{form_id}?id=aaa&pw=xxx&name=xxx&email=xxx


FORM태그를 이용한 값 전달하기

HTML FORM
- 폼에 입력한 데이터를 웹 서버로 보내고 웹 서버는 받은 데이터를 처리한다.
- 그 결과 사용자에게 반환하거나 데이터베이스에 저장
- 클라이언트 측 자바스크립트 웹 어플리케이션을 만들 때 사용자에게 입력받는
사용자 인터페이스로 사용한다.
- 이때 데이터 처리는 클라이언트 측 자바스크립트 프로그램이 담당한다.

폼 요소와 폼 컨트롤 요소
- 웹 서버에 데이터를 보낼 때는 다음과 같은 과정을 거친다.
   - method속성 : 데이터 전송 방법
   - action속성 : 데이터를 전송하기 위한 url
- form요소 안에 사용자로부터 입력을 받는 input요소 등의 폼 컨트롤 요소를 배치한다.
- 마지막으로 form요소 안에 사용자로부터 입력을 받는 input요소 등의 폼 컨트롤 요소를 배치한다.


------------------------------------------------------------------------------------------------------------
프론트엔드 개발
사용자의 바로 앞에서 사용자와 상호작용하며 애플리케이션 로직을 수행하고 
백엔드 서버로 요청을 전달하는 역활

웹 서비스에서 클라이언트 또는 프론트엔드안 웝 브라우저를 뜻한다.
사용자는 자신의 컴퓨터에서 브라우저를 실행한다.
인터넷을 이용해 서버에 있는 자원(html,css,js)을 사용자의 컴퓨터로 다운로드 후,
브라우저에서 실행시킨다.

프론트엔드 개발환경 설정
자바스크립트 라이브러리인 react.js를 이용해 프론트엔드 개발을 한다.
React.js를 사용하기 위해 자바스크립트 런타임 환경을 이용한다.
Node.js를 이용하면 브라우저 밖에서도 스크립트를 컴파일하고 실행할 수 있다.

Node.js
이전에 자바스크립트 코드는 브라우저 내에서만 실행이 가능했다.
자바스크립트를 실행하기 위해서는 브라우저상의 html렌더링의 일부로 실행하거나
개발자 창의 자바스크립트 콘솔을 이용해 실행해야 했다.
노드js는 자바스크립트를 컴퓨터에서 실행할 수 있게 해주는 자바스크립트 런타임 환경이다.

브라우저 밖에서도 실행할 수 있다는 것은 자바스크립트를 클라이언트 언어뿐만아니라
서버 언어로도 사용할 수 있다는 뜻이다.
즉,자바스크립트로 서버를 만들 수 있다는 뜻이다.

우리는 자바스크립트로 된 node서버를 이용해 프론트엔드 서버를 개발한다.
요청이 왔을 때 HTML,JS,CSS를 반환하는 정도의 기능을 할 것이다.

NPM(Node Package Manager)
node.js의 패키지 관리 시스템
npm을 이용해 npmjs(https://www.npmjs.com)에서 node.js의 라이브러리를 설치한다.
npm은 node.js를 설치하면 함께 설치된다.


책에서는 16.14.2 LTS버전을 사용하므로 공부할 때는 같은 버전을 사용하는 것을 권장한다.

nodejs 프로젝트를 초기화(reset아님) 하기 위해서는 npm init을 사용한다.
우리는 npm이 아닌 npx라는 툴로 리액트 애플리케이션을 초기화할 예정이다.
npm으로 하면 일일히 설정해야 하는 부분이 많기 때문이다.

npm으로 프로젝트를 구성하려고 하면
패키지 이름, 버전 등등 설정해야 하는 내용이 많다.
이 정보들을 다 입력하고 나면 package.json이라는 파일을 만들어준다.
package.json에 프로젝트의 메타데이터가 들어간다.


dependencies : 의존성
내가 프로젝트를 구성하는데 필요한 라이브러리를 정의하는 공간

"react": "^18.3.1"
version 		명시된 version과 일치
>version 		명시된 version보다 높은 버전 
>=version 	명시된 version보다 같거나 높은 버전 
<version 		명시된 version보다 낮은 버전 
<=version 	명시된 version보다 같거나 낮은 버전 
~version 		명시된 version과 근사한 버전(패치한 버전 범위 내)
^version		명시된 version과 호환되는 버전 

ex) ^1.2.3 -> 내가 1.2.3버전으로 개발을 했는데 이 버전과 호환되는 최근 버전으로 사용해줘

material-ui
리액트 개발에서 쉽게 사용할 수 있는 UI프레임워크이다.
미리 만들어놓은 컴포넌트나 CSS를 사용할 수 있다.

emotion
JS로 CSS스타일을 작성할 수 있도록 설계된 라이브러리


렌더링 원리
1. HTML코드를 파싱한다. DOM트리로 만든다.
2. image,css,script등 다운로드해야하는 리소스를 다운로드한다.
3. CSS도 CSSOM트리로 변환을 한다.
4. 다운로드한 자바스크립트를 인터프리트, 컴파일, 파싱, 실행한다.
5. 파싱을 마친 후 브라우저는 렌더링에 들어간다.

SPA(Single Page Application) <-> MPA(Multi Page Application)
서버에 다시 요청하지 않고 자바스크립트가 동적으로 HTML을 재구성해서 만드는 애플리캐이션

CSR(Client Side Rendering)
- 서버에서 최소한의 HTML을 받고, 내부에 위치한 script태그로 JS를 받아서 클라이언트에서
페이지를 렌더링하는 형식
- React.js, Vue.js, Angular.js
장점
- 초기 렌더링 이후에 진행되는 렌더링의 속도가 매우 빠르다.

단점
- 초기 구동에 필요한 파일을 전부 받아야 하기 때문에 초기 페이지 구동 속도가 느리다.

SSR(Server Side Rendering)
- 서버에서 사전에 렌더링된 파일을 클라이언트에게 전송하고, 클라이언트는 이를 즉시
렌더링하는 방식
- 단 JS의 경우 정적 리소스(HTML,CSS)가 렌더링 된 후 적용되기 때문에 JS가 모두
적용되기 전에는 조작이 불가능하다.

1. 사용자가 웹페이지를 방문할 경우, 서버는 이를 확인하고 브라우저에게 제공할 
HTML컨텐츠를 컴파일한다.
2. 컴파일된 HTML은 브라우저에 제공되며, 브라우저는 이를 다운로드하고 렌더링하여 
사용자가 이를 볼 수 있도록 한다.
3. 이후 JS파일을 다운로드 받은 후 실행하여 사용자와 페이지 간의 상호작용을 가능하게끔한다.
4. 사용자가 다른 페이지로 이동을 할 경우,1~3번 과정을 반복한다.

- JSP, Thymeleaf 


ReactDOM
- react는 순수 자바스크립트이고, 자바스크립트를 이용해 컴포넌트를 만들어 나간다.
- 실제로 브라우저가 이해할 수 있는 것은 HTML, CSS, JS뿐이다.
- JSX문법으로 작성된 코드를 Babel라이브러리가 순수 자바스크립트로 변환하고
우리가 만든 컴포넌트를 html과 연결하는 작업을 해주는 라이브러리가 reactdom이다.

정리
1. 브라우저가 어떻게 작동을 하는가?
2. node설치 -> npm, npx를 이용하여 react프로젝트를 생성
3. 애플리케이션 실행
4. 리액트가 SPA로 어떻게 작동하는지 알아보았다.
5. JSX가 뭔지 알아봤다.