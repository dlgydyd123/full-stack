이력서 기술스택 면접 -> 이력서,자소서,포폴 기반으로 질문이 들어옴
Language : JAVA				람다식,스트림,OOP에 맞게 설계,메서드를 자유자재로 쓸 수 있다.
frontend: html,css,js,react(Axios,fetch)		컴포넌트 설계, 비동기통신
backend: Springboot			의존성 주입, JPA사용
DB: Oracle, H2, MySQL, fireStore		
cloud : AWS, firebase
build-tool : gradle
mobile: reactive-native
ORM: JPA


NoSQL(Not Only SQL)
전통적인 데이터베이스와는 달리 다른 데이터 저장 방식을 사용하는 데이터베이스
문서형 저장

컬렉션 : 테이블같은 개념 데이터를 저장하는 기본 단위
JSON처럼 객체로 동작을 하고 키-값쌍으로 구성

문서 : Row같은 개념


채널목록화면
생성된 채널을 보여주는 화면
많은 양의 채널을 목록으로 사용자가 보여줄 수도 있다
채널이 새로 생성되면 자동으로 목록에 추가 되고록 만들자

ScrollView
모든 데이터를 한 번에 렌더링하므로 렌더링 해야 하는 데이터의 양을 알고 있을 때 
사용하는 것이 좋다.
렌더링하는 데이터가 매우 많을 경우 한번에 모든 데이터를 렌더링하면 렌더링 속도가
느려지고 메모리 사용량이 증가하는 등 성능이 저하된다는 문제가 있다.

FlatList
화면에 적절한 양의 데이터만 렌더링하고 스크롤의 이동에 맞춰 필요한 부분만 추가적으로 
렌더링을 하는 특징이 있다. 이런 특징 덕분에 데이터의 길이가 가변적이고 양을 예측할 수
없는 상황에서 사용하기 좋다.

렌더링 되는 아이템의 수
windowSize의 기본값은 21
21이라는 값은 현재화면 1과 현재 화면보다 앞쪽에 있는 데이터 (10) 그리고
현재 화면보다 뒤쪽에 있는 데이터(10)을 의미한다.

현재화면(10) + 이전데이터(10*10screens) + 이후데이터(10*10) =210

스크롤 맨위에 아래 데이터 렌더링
현재데이터(7) + 이전데이터(0) + 이후데이터(7*10) = 77개

windowSize를 작은 값으로 변경하면 렌더링 되는 데이터가 줄어들어서 메모리의 소비를 
줄이고 성능을 향상시킬 수 있다.

빠르게 스크롤을 하면 렌더링 되지 않은 부분은 흰 공백으로 나올 수 있다.

moment라이브러리
시간 및 날짜와 관련한 함수를 쉽게 작성할 수 있다.

채팅화면 
각 채널 문서에 message 컬렉션을 만들면 메시지 데이터를 관리할 수 있다.
채널별로 발생한 메시지를 모아서 관리하면 채널에서 주고 받는 메시지를 편하게 
저장하고 불러올 수 있다.
